CS 143 Project 1 Writeup

Team Member Information:
Kenneth Shi 304063313
Andrew Yoon 903912647

    We implemented the SimpleDB by following the exercises in order as given in
the spec. Kenny did the primary work on Exercises 1, 3, and 4. Andy did the
primary work for Exercises 2, 5, and 6. We collaborated to debug the given end-
to-end tests.

    We decided to implement our iterators in separate classes, called
HeapPageIter and HeapFileIter. HeapPageIter is a very simple class which
iterates over the tuples in a page. To facilitate our new class definition, we
added an additional method in the Page interface called iterator(), which
creates a new HeapPageIter.
    HeapFileIter does more meaningful work. It uses a HeapPageIter to iterate
over tuples, and when we reach the end of a page, the HeapFileIter gets the
next page in the file and continues. We added a helper method called
read_page(), which obtains the next page by calling BufferPool.getPage().
    SeqScan utilizes its child HeapFileIter, which in turn calls its child
HeapPageIter.

    The most difficult class to implement was the HeapFile. We create a
RandomAccessFile to open the given file, and use a FileChannel to actually
read the data from that file's pages. This class was particularly difficult
because we also had to create the HeapFileIter class.

    We spent a little less than a week of daily work on this project. We ran
into major issues while debugging. We believe that the issues stemmed from some
sort of ant caching. For example, one partner was passing unit tests and the
other was failing, both on the exact same source code. Additionally, we failed
the testCache and testSmall end-to-end tests. Eventually we were able to fix
the problems, but found it difficult to reproduce the bugs we had fixed. In the
end, we decided to delete the bin/ folder each time before running the tests.

    Currently, we pass all unit and system tests, and there are no known
issues with our code, except for the caching weirdness as described above.
