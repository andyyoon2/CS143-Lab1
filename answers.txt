CS 143 Project 1 Writeup

Team Member Information:
Kenneth Shi 304063313
Andrew Yoon 903912647

    We implemented the SimpleDB by following the exercises in order as given in
the spec. We split up the work so that one of us would work on one exercise and 
someone would work on the next. For example, Kenny worked on exercises 1, 3, and 
4, while Andy worked on 2, 5, and 6. But since a lot of the exercises relied on 
one another, we ended up just working together on a lot of the exercises and 
making sure that our code worked.

    The only major changes we made to the API was that we decided to implement 
our iterators in separate classes, called HeapPageIter and HeapFileIter. 
HeapPageIter is a very simple class which iterates over the tuples in a page. 
To facilitate our new class definition, we added an additional method in the 
Page interface called iterator(), which creates a new HeapPageIter, so this 
was another big change to the API. HeapFileIter does more meaningful work. 
It uses a HeapPageIter to iterate over tuples, and when we reach the end of 
a page, the HeapFileIter gets the next page in the file and continues. We 
added a helper method called read_page(), which obtains the next page by 
calling BufferPool.getPage(). SeqScan utilizes its child HeapFileIter, which 
in turn calls its child HeapPageIter.

    Design decisions we made throughout the lab were mainly to try and be as 
efficient as possible. Instead of storing and catalogs in simple lists, we 
felt that using HashMaps would be a lot faster and would lead to better working 
code, so we implemented our catalog with a HashMap. We also implemented other 
classes using HashMaps, because we found them to be the most efficient data 
structure for a lot of our code, especially since finding something in our map 
has O(1). Another design decision we made was to keep the Heap Page and Heap 
File iterators in their own separate class, because we felt that it would be 
better organized. 

    The most difficult class to implement was the HeapFile. We create a
RandomAccessFile to open the given file, and use a FileChannel to actually
read the data from that file's pages. This class was particularly difficult
because we also had to create the HeapFileIter class, and we ran into a lot of
problems while implementing the class mainly because we has issues with testing.

    We spent a little less than a week of daily work on this project. We ran
into major issues while debugging. We believe that the issues stemmed from some
sort of ant caching. For example, one partner was passing unit tests and the
other was failing, both on the exact same source code. At first we thought it
was an issues with our version control (which wasn’t git at the time) but then
we found out that it was some weird caching issues with ant. Apparently, when we
run ant system tests, we would have a bin file created that kept a cache of our
results, so sometimes when we fixed an issue in our code, it didn’t actually 
show the changes in our ant. So we ended up spending a couple of hours trying to
debug an issue when it turns out it was just a bin caching issue. After deleting
the bin, we were able to pass the system tests. 

    Currently, we pass all unit and system tests, and there are no known
issues with our code, except for the caching weirdness as described above.
Please see the comments in our code for additional documentation.
